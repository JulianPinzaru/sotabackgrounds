"""
Django settings for sota_api project.

Generated by 'django-admin startproject' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
import sys
import datetime

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
ROOT_DIR = BASE_DIR.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-e4qa=(cp&aw5_^hz+ve5=ie2sf*3nh2-$4@(glc%nap@o((#_c'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', ]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'image_generator',
    'schultz'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'sota_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sota_api.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/api/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATIC_ROOT = ROOT_DIR / 'public' / 'static'
STATICFILES_DIRS = [ROOT_DIR / 'private' / 'static' ]

# Absolute filesystem path to the directory that will hold user-uploaded files.
MEDIA_ROOT = ROOT_DIR / 'public' / 'media'

# URL that handles the media served from MEDIA_ROOT. Make sure to use a trailing slash
MEDIA_URL = '/api/media/'

# Logging
from django.utils.log import DEFAULT_LOGGING

if os.environ.get('TARGET') == 'production':
    LOGLEVEL = os.environ.get('LOGLEVEL', 'info').upper()
else:
    LOGLEVEL = 'DEBUG'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'formatters': {
        'simple': {
            'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        },
        'django.server': DEFAULT_LOGGING['formatters']['django.server'],
    },
    'handlers': {
        'file_handler': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'logit.log',
            'maxBytes': 1024 * 1024 * 15,  # 5 MB
            'backupCount': 5,
            'formatter': 'simple',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'django.server': DEFAULT_LOGGING['handlers']['django.server'],
    },
    'loggers': {
        '': {
            'handlers': ['console', 'file_handler'],
            'level': 'WARNING',
        },
        'django.server': DEFAULT_LOGGING['loggers']['django.server'],
    }
}

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_THROTTLE_CLASSES': (
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ),
    'DEFAULT_THROTTLE_RATES': { # 86,400 seconds in a day
        'anon': '20/minute',
        'user': '10000/day',
    },
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',)
}

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

import pathlib
import sys
sys.path.insert(1, '/home/weex/repos/www/sota-backgrounds/sota_api/schultz/')  # insert at 1, 0 is the script path (or '' in REPL)

import torch
import dnnlib
import legacy
import training.augment


# MODEL_PATH = pathlib.Path(
#     "/home/weex/repos/www/sota-backgrounds/sota_api/inference/networks/univervse1024/network-snapshot-002112.pkl")
# MODEL_PATH = pathlib.Path(
#     "/home/weex/repos/www/sota-backgrounds/sota_api/inference/networks/univervse1024/network-snapshot-001280.pkl")

MODEL_PATH_BACKGROUNDS = pathlib.Path(
    "/home/weex/repos/www/sota-backgrounds/sota_api/schultz/networks/backgrounds1024/network-snapshot-003520.pkl")

network_pkl_backgrounds = str(MODEL_PATH_BACKGROUNDS)
print('Loading networks from "%s"...' % network_pkl_backgrounds)
# DEVICE = torch.device('cpu')
DEVICE = torch.device('cuda')
f = dnnlib.util.open_url(network_pkl_backgrounds)
BACKGROUNDS_MODEL = legacy.load_network_pkl(f)['G_ema'].to(DEVICE)  # type: ignore
f.close()

MODEL_PATH_UNIVERSE = pathlib.Path(
    "/home/weex/repos/www/sota-backgrounds/sota_api/schultz/networks/univervse1280x768/universe-1280x768-3420.pkl")
network_pkl_universe = str(MODEL_PATH_UNIVERSE)
# DEVICE = torch.device('cpu')
DEVICE = torch.device('cuda')
print('Loading networks from "%s"...' % network_pkl_universe)
f = dnnlib.util.open_url(network_pkl_universe)
UNIVERSE_MODEL = legacy.load_network_pkl(f)['G_ema'].to(DEVICE)  # type: ignore
f.close()
